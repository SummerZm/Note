worker模式
======================================================
此多路处理模块(MPM)使网络服务器支持混合的多线程多进程。由于使用线程来处理请求，所以可以处理海量请求，而系统资源的开销小于基于进程的MPM。但是，它也使用了多进程，每个进程又有多个线程，以获得基于进程的MPM的稳定性。

#设置worker多路处理模块
<IfModule mpm_worker_module>
    StartServers          5
	ServerLimit          20
	ThreadLimit         200
	MaxClients         4000
	MinSpareThreads      25
	MaxSpareThreads   250
	ThreadsPerChild     200
	MaxRequestsPerChild   0
</IfModule>

StartServers：设置服务器启动时建立的子进程数量。因为子进程数量动态的取决于负载的轻重,所有一般没有必要调整这个参数。
ServerLimit：服务器允许配置的进程数上限。
			 只有在你需要将MaxClients和ThreadsPerChild设置成需要超过默认值16个子进程的时候才需要使用这个指令。
			 不要将该指令的值设置的比MaxClients 和ThreadsPerChild需要的子进程数量高。
			 修改此指令的值必须完全停止服务后再启动才能生效，以restart方式重启动将不会生效。

ThreadLimit：设置每个子进程可配置的线程数ThreadsPerChild上限,该指令的值应当和ThreadsPerChild可能达到的最大值保持一致。
			 修改此指令的值必须完全停止服务后再启动才能生效，以restart方式重启动将不会生效。

MaxClients：用于伺服客户端请求的最大接入请求数量（最大线程数）。任何超过MaxClients限制的请求都将进入等候队列。
			默认值是"400"，16 (ServerLimit)乘以25(ThreadsPerChild)的结果。
			因此要增加MaxClients的时候，你必须同时增加 ServerLimit的值。
			笔者建议将初始值设为(以Mb为单位的最大物理内存/2),然后根据负载情况进行动态调整。
			比如一台4G内存的机器，那么初始值就是4000/2=2000。

MinSpareThreads：最小空闲线程数,默认值是"75"。这个MPM将基于整个服务器监视空闲线程数。
				 如果服务器中总的空闲线程数太少，子进程将产生新的空闲线程。

MaxSpareThreads：设置最大空闲线程数。默认值是"250"。
			这个MPM将基于整个服务器监视空闲线程数。如果服务器中总的空闲线程数太多，子进程将杀死多余的空闲线程。
			MaxSpareThreads的取值范围是有限制的。Apache将按照如下限制自动修正你设置的值：
			worker要求其大于等于 MinSpareThreads加上ThreadsPerChild的和。
			ThreadsPerChild：每个子进程建立的线程数。默认值是25。
			子进程在启动时建立这些线程后就不再建立新的线程了。每个子进程所拥有的所有线程的总数要足够大，
			以便可以处理可能的请求高峰。

MaxRequestsPerChild：设置每个子进程在其生存期内允许伺服的最大请求数量。
			到达MaxRequestsPerChild的限制后，子进程将会结束。如果MaxRequestsPerChild为"0"，
			子进程将永远不会结束。将MaxRequestsPerChild设置成非零值有两个好处：
			可以防止(偶然的)内存泄漏无限进行而耗尽内存；给进程一个有限寿命，
			从而有助于当服务器负载减轻的时候减少活动进程的数量。
			如果设置为非零值，建议设为10000-30000之间的一个值。
			公式：
				ThreadLimit >= ThreadsPerChild
				MaxClients <= ServerLimit * ThreadsPerChild 必须是ThreadsPerChild的倍数
				MaxSpareThreads >= MinSpareThreads+ThreadsPerChild

