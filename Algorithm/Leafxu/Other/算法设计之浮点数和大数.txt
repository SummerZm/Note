浮点数和大数
=========================
1. 整数的范围
	a. 8  位 两百左右
	b. 16 位 6万左右
	c. 32 位 42亿左右
	d. 64 位 1.8万光年
	
2. 大数库
	a. GMP开源大数库
	b. OpenSSL 
	c. 密码学计算库 Crypto++
	d. Miracl库收费
	
3. 大数库实现
	a. 字符串方式，如 46744073709551615，每一个字符就是十进制数字的一个位
		-- 简单、直观
		-- 效率不高，特别是乘法和除法的计算,缺点是占用存储空间
		
	b. "2n 进制数"的形式表示大数，对于不支持 64 位整数的系统可采用16进制
		-- 64 用2的32幂进制表示大数 [避免溢出]
		-- 32 用2的16幂进制表示大数
		
4. 浮点数的误差
	a. float 类型的浮点数有效数字只有 23 个比特，换算成十进制差不多 7~8 个有效数位
	b. double 类型的浮点数 52 个比特位表示有效数字，换算成十进制的话也就是大约 16 个十进制位的有效数字
	
5. 浮点数不要用于判断
	double r1 = 16.1 * 100 + 0.9 * 100;
    double r2 = 17.0 * 100;
    if (r1 == r2)
    {
        std::cout << "16.1 * 100 + 0.9 * 100 == 17.0 * 100" << std::endl;
    }