算法实现
===================================================================================================
A. 组成：
	1. 数据模型
		a. 抓住主要因素，舍弃次要因素，过渡到用计算机语言的数据结构能够描述问题为止.

	2. 算法逻辑主体
		a. 承载数据处理的代码流程.

	3. 输入输出
		a. 输入就是把自然语言描述的问题转化成计算机能存储或处理的数据，并存入数据模型中.
		b. 输出就是将计算机处理后的结果（也在数据模型中定义）转化成人类能理解的方式输出.


B. 障碍：【算法为什么难？】
	1. 对特有的问题设计出解决问题的算法实现 ---- 建模能力(语言翻译能力) 代码熟悉度
	2. 不能用已有的通用算法解决具体的问题 ---- 积累

C. 数学问题的建模
	1. 无穷大和无穷小是无法用计算机表达的
	2. 极限和无穷数列也是无法用计算机存储和描述的
	3. 不影响问题解决的前提下增加约束条件，使得问题能在某个范围内用算法解决。

D. 其他： 
	1. 信息数字化  ---  小偷问题
	2. 未知的问题转化成已知问题
	3. 将现实问题抽象成数学问题

贪心算法
======================================================================
A. 简介：
	1. 贪婪法可能会错过真正的最优解，得到与最优解比较接近的近似最优解 
	2. 贪婪法简单、高效，省去了为找最优解可能需要的穷举操作，通常作为其他算法的辅助算法来使用

B. 基本设计思想
	1. 建立的数学模型，定义最优解的模型

	2. 定义子问题的最优解结构
		a. 有的问题可以按照问题的求解过程一步一步进行分解，每做一次选择就将问题简化为一个规模更小的子问题。
		b. 分解成相对独立的几个子问题，对每个子问题求解完成后再按照某种公式或计算法则将其组合起来得到全局最优解。

	3. 应用贪心原则/策略，根据最优解的模型，堆叠出全局最优解

分治算法
======================================================================
A. 简介：
	1. 将无法着手解决的大问题分解成一系列规模较小的相同问题

B. 应用场景：
	1. 最轻、最重问题
	2. 矩阵乘法
	3. 大整数乘法
	4. 排序（例如，快速排序和归并排序）
	5. 快速傅立叶变换算法
	6. Karatsuba 乘法算法
	7. 二分查找
	8. 棋盘覆盖问题

C. 基本步骤：
	1. 分解：将问题分解为若干个规模较小，相互独立且与原问题形式相同的子问题，确保各个子问题的解具有相同的子结构。
	2. 解决：如果上一步分解得到的子问题可以解决，则解决这些子问题，否则，对每个子问题使用和上一步相同的方法再次分解，然后求解分解后的子问题，这个过程可能是一个递归的过程。
	3. 合并：将上一步解决的各个子问题的解通过某种规则合并起来，得到原问题的解。

D. 其他
	1. 一些使用了递归方法的算法，也都可以用一个自己构造的栈将其改编为非递归方法。


问题：
A. 什么是NP完全问题？
B. 什么是计算机可计算问题？
C. 算法的二项次时间内求解