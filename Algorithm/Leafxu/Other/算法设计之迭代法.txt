A. 装配线与工作站问题
	1. 穷举法
		a. 线性搜索
		b. 广度遍历搜索
		c. 深度遍历搜索
		d. 树型遍历搜索
		具体使用何种遍历模式，取决于问题的解空间是什么模式	
	
	2. 解空间的存储
		a. 当问题规模比较大时，有可能超出系统存储能力的限制。
		b. 如果这个结果已经不是最优解，则不存储更新当前结果,直接回溯。
	
B. 桶分水问题 - [树状空间的穷举搜索方法] - [农夫-狼-羊-菜过河问题]
	1. 这个问题和一般的遍历穷举不同之处在于问题的状态是静态的
	2. 需要一个“动作”才能完成状态的转换，产生新的状态。因此遍历算法实际上不是直接对状态进行遍历，而是对“动作”进行遍历。
	3. 第一个重点是通过循环处理 action_table 表实现对动作的遍历，这是个常用的技巧。希望大家掌握（可以对比书中的2重循环代码理解
	4. 第二个重点是状态搜索的主体算法实现 SearchState() 函数
		a. 用了递归实现方式，利用 C++ 的 std::queue 队列提供的 push() 和 pop() 接口实现了状态的深度优先搜索和回溯

	5. 第三个重点是倒水动作 TakeAction() 函数
		a. 它实现了对倒水出现的两种情况的处理，即能不能倒水、能倒多少水。
		b. 同时还记录了此次倒水产生的 ACTION。
		
C. 24点计算器 - 穷举法和分治法相结合
	1. 中缀表达式和后缀表达式在算法中的实现 -- 【运算函数的封装】
	2. 用m个数排列组合计算24点【四种基本数学运算法则】
	3. 无重复全排列的代码实现细节
	4. 如何用一致的代码处理不同规模和属性范围的子问题
	
	5. 注意点：
		a. 参数数据类型的选取：不能使用int,应该使用double.  -- [除法会产生浮点数]
		b. 剪枝: 
			-- 运算可能失败，比如除数是 0 的情况，不再继续处理这个运算符
			-- 排列时排除自身下标
			
		c. 除了被选出来的两个数，将剩下的数加入子问题
	
		
	