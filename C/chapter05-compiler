1. 编译链接器的使用
	A. 编译链接的几个阶段
		a. 阶段p - 预处理器 ----> 处理宏 [Preprocess]
		b. 阶段a - 编译器 ----> 生成目标文件 [汇编complie，编译assemble]
		c. 阶段l - 链接器 ----> 将目标文件链接成可执行文件
		d. 参数-w后面加相应的阶段的字符[p|a|l] 表示给相应的处理器设置选项
			----> eg: -wl, -m 表示给链接器设置 -m 选项

		e. 通过 gcc --help 可以了解相关信息

	B. 动态链接的优点
		a. 动态链接的程序小，可节省磁盘空间和虚拟内存。
			----> 因为它运行时才被加载进内存
			----> 所有动态链接到某一动态库的可执行程序，可以共享该函数库的一个单独拷贝

		b. 动态链接的程序，可以不必因为库的更新或者系统的变动而重新链接，只需要更新动态库就可以了
        c. 如何查看动态库? ldconfig -p | grep lib
        d. 如何安装动态库?
            法1: ln -s /where/you/install/lib/*.so  /usr/lib; sudo ldconfig
            法2: export LB_LIBRARY_PATH=/where/you/install/lib:$LB_LIBRARY_PATH;sudo ldconfig
            法3：vim /etc/ld.so.confg;  add /where/you/install/lib; sudo ldconfig

	C. 动态库的一些基础知识
		a. 动态库的位置不能随意改动，否则程序将找不到
		b. 链接选项 -pic的作用
			----> 生成与位置无关的代码。
			----> 即：当动态库函数在运行时被加载进内存时，直接放置在空闲的地方,不需要改动代码的页面分布
			----> 若不使用IPC：对于动态库，每个库函数不得不在运行的时候通过修改代码的页面而放置到固定的位置

		c. 动态库文件拓展名为.so, 静态库拓展名为.a
		d. eg: -lthread   表示链接库文件 libthread.so 或者libthread.a
		e. eg: -L/usr/lib  表示在路径/usr/lib, 搜索库文件

		f. 相比于动态库，静态库的链接更严格
			----> 静态库的链接需要注意库的链接顺序
			----> 顺序出错时提示：symbol refencing errors
        
        g. 不要写与函数库或系统函数同名字的函数。会造成极其隐秘的BUG 

        h. 链接选项 -pie的作用
            ----> 程序载入的地址随机化，提高破译难度
            ----> gcc 4.x之后的版本默认打开，可能会导致32/64兼容问题

		i. nm + 程序名 查看程序的符号列表

            例子：
			nm ~/cdemo/syscall/ipc/fifo/writeTest:
			0000000000601064 B __bss_start
            0000000000601064 b completed.6354
            0000000000601060 D __data_start
            0000000000601060 W data_start
            0000000000400630 t deregister_tm_clones
            00000000004006a0 t __do_global_dtors_aux
            0000000000600e18 t __do_global_dtors_aux_fini_array_entry
            00000000004008b8 R __dso_handle
            0000000000600e28 d _DYNAMIC
            0000000000601064 D _edata
            0000000000601068 B _end
                             U __errno_location@@GLIBC_2.2.5
            00000000004008a4 T _fini
            00000000004006c0 t frame_dummy
            0000000000600e10 t __frame_dummy_init_array_entry
            0000000000400a98 r __FRAME_END__
            0000000000601000 d _GLOBAL_OFFSET_TABLE_
                             w __gmon_start__
            0000000000400540 T _init
            0000000000600e18 t __init_array_end
            0000000000600e10 t __init_array_start
            00000000004008b0 R _IO_stdin_used
                             w _ITM_deregisterTMCloneTable
                             w _ITM_registerTMCloneTable
            0000000000600e20 d __JCR_END__
            0000000000600e20 d __JCR_LIST__
                             w _Jv_RegisterClasses
            00000000004008a0 T __libc_csu_fini
            0000000000400830 T __libc_csu_init
                             U __libc_start_main@@GLIBC_2.2.5
            00000000004006ed T main
                             U memset@@GLIBC_2.2.5
                             U mkfifo@@GLIBC_2.2.5
                             U open@@GLIBC_2.2.5
                             U printf@@GLIBC_2.2.5
                             U puts@@GLIBC_2.2.5
            0000000000400660 t register_tm_clones
            0000000000400600 T _start
            0000000000601068 D __TMC_END__
                             U write@@GLIBC_2.2.5

            nm 选项：
            -a/--debug-syms：显示所有符号，包括debugger-only symbols
            -B：等同于 --format=bsd，兼容 MIPS nm
            -C/--demangle：将低级符号名解析成用户级名字。这样可以使得C++函数名具有可读性。
            --no-demangle：默认选项，不将低级符号名解析成用户级名字。
            -D/--dynamic：显示动态符号。这个选项只对动态目标（比如特定类型的共享库）有意义。
            -f format/--format=format：使用format格式输出。format可以选取bsd、sysv或posix，该选项在GNU的nm中有用。默认为bsd
            -g/--extern-only：只显示外部符号
            -l/--line-numbers：对于每一个符号，使用debug信息找到文件名和行号。
            -n/-v/--numeric-sort：按符号对应地址的顺序排序，而不是按符号名字符顺序排序
            -p/--no-sort：按照目标文件中遇到的符号顺序显示，不排序
            -P/--portability：按照POSIX2.0标准格式输出，等同于使用 -f posix
            -r/--reverse-sort：反转排序
            -s/--print-armap：当列出库中成员的符号时，包含索引。索引的内容包括：哪些模块包含哪些名字的映射
            -u/--undefined-only：只显示未定义符号
            --defined-only：只显示定义的符号

            A：该符号的值是绝对的，在以后的链接过程中，不允许改变。这样的符号，常常出现在中断向量表中，例如用符号来表示各个中断向量函数在中断向量表中的位置。
            B：该符号的值出现在非初始化数据段BSS中。例如，一个文件中定义全局 static int s_int。则符号s_int 类型为b，位于bss section中。其值表示该符号在bss段的偏移。一般而言，bss段分配于RAM中。
            C：该符号为common。common symbol是未初始化数据段。该符号没有包含于一个普通section中。只有在链接过程中才进行分配。符号的值表示要分配的字节数。例如，在一个c文件中，定义 int g_no_init，并且该符号在别的地方会被引用，则该符号类型就是C，否则为B。
            D：该符号位于初始化数据段中。一般来说，分配到data section中。比如，全局变量 int g_init = 2;
            G：该符号也位于初始化数据段。主要用于small object，提高访问small data object的一种方式。
            I：该符号是对另一个符号的间接引用。
            N：该符号是一个debugging符号
            R：该符号位于只读数据区。比如，全局变量 const int const_int = 0; 如果在一个函数中定义 const char* test = "abc"; const int a = 2; 使用nm都不会得到符号信息。但是字符串"abc"分配于只读存储器中，test 在rodata section中，大小为4
            S：符号位于非初始化数据区，用于 small object
            T：符号位于代码区 text section
            U：符号在当前文件中是未定义的，即该符号的定义在别的文件中。比如，当前文件中调用另一个文件中的函数，在这个本目标文件中，函数就是未定义的。但是在定义它的文件中，类型为T。但是对于全局变量来说，在定义它的文件中，符号类型是C，在使用它的文件中，类型是U。
            V：该符号是一个weak object
            ？：该符号类型没有定义











