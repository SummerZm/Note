A. 函数声明
	1. 函数的定义有函数体，函数的声明没有函数体，编译器很容易区分定义和声明,有没有 extern 都是一样的。
	
B. 变量的声明
	1. 变量和函数不同，编译器只能根据 extern 来区分，有 extern 才是声明，没有 extern 就是定义。

C. 预处理
	1. gcc -E test.c -o test.i
	2. Visual Studio 中，在当前工程的属性面板C/C++预处理器中将“预处理到文件”设置为“是”

D. 编译
	2. gcc -S demo.i -o demo.s
	2. 工程项目文件下的asm文件

E. 汇编
	1. 汇编的过程就是将汇编代码转换成可以执行的机器指令。
	2. 大部分汇编语句对应一条机器指令，有的汇编语句对应多条机器指令
	
F. 链接
	1. 目标文件有些函数和全局变量的地址还未找到，程序不能执行。
	2. 链接的作用就是找到这些目标地址，将所有的目标文件组织成一个可以执行的二进制文件。
	3. 链接（Linking）的作用就是将多个目标文件合并成一个可执行文件。
	4. 在链接过程中，链接器会将多个目标文件中的代码段、数据段、调试信息等合并成可执行文件中的一个段。段的合并仅仅是一个简单的叠加过程
	5. 除了合并有用的段（例如代码段、数据段等），链接器还会删除多余的段（例如重定位段、段表等），增加其他段（例如程序头表等）

G. Windows和Linux下的文件格式
	1. PC平台上流行的可执行文件格式主要是 Windows 下的 PE（Portable Executable）
	2. Linux 下的 ELF（Executable Linkable Format）
	3. 它们都是 COFF（Common File Format）格式的变种, COFF 是 Unix V3首先提出的规范。
	4. Unix V4 又在 COFF 的基础上引入了 ELF 格式
	5. 目标文件与可执行文件的存储格式几乎是一样的，我们可以将它们看成是同一种类型的文件，在 Windows 下，将它们统称为 PE 文件，在 Linux 下，将它们统称为 ELF文件。
	6. 动态链接库（DLL，Dynamic Linking Library）（Windows 下的.dll和 Linux 下的.so）和静态链接库（Static Linking Library）（Windows 下的.lib和 Linux 下的.a）也是按照可执行文件的格式存储的。
	7. 静态链接库稍有不同，它是把多个目标文件捆绑在一起形成一个文件，再加上一些索引，你可以简单地把它理解为一个包含了很多目标文件的包。
	8. 其他不太常见的可执行文件格式还有 Intel/Microsoft 的 OMF（Object Module Format）、Unix a.out、MS-DOS .COM 等。

H. 在 Linux 的 ELF 标准中，主要包含以下四类文件：
	1. 可重定位文件（Relocatable File）: 这类文件包含了代码和数据，可以被用来链接成为可执行文件或动态链接库。静态链接库其实也是可重定位文件。	
		-- Linux 下的 .o 和 .a，Windows 下的 .obj 和 .lib。

	2. 可执行文件（Executable File）: 这类文件包含了可以直接执行的程序。	Windows 下的 .exe，Linux 下的可执行文件没有固定的后缀，一般不写。
	3. 共享目标文件（Shared Object File）: 这种文件包含了代码和数据
		一种是链接器可以使用这种文件跟其他的可重定位文件和共享目标文件链接，产生新的目标文件；
		第二种是动态连接器可以将几个共享目标文件与可执行文件结合，作为进程的一部分来运行。	
		Linux 下的 .so，Windows 下的 .dll。

	4. 核心转储文件（Core Dump File）: 当进程意外终止时，系统可以将该进程的地址空间的内容以及其他信息保存到核心转储文件。	Linux 下的 core dump。

I. 目标文件和可执行文件
	1. 目标文件包含了10个左右的段，而可执行文件包含了将近30个左右的段
	2. 操作系统并不是为每个段都分配一个区域，而是将多个具有相同权限的段合并在一起，加载到同一个区域。[超级重要]
	3. 站在文件结构的角度，可执行文件包含了众多的段（Section），每个段都有不同的作用；
	4. 站在加载和执行的角度，所有的段都是数据，操作系统只关心数据的权限，只要把相同权限的数据加载到同一个内存区域，程序就能正确执行。
		-- 常见的数据权限无外乎三种：只读（例如 .rodata 只读数据段）、读写（例如 .data 数据段）、读取和执行（例如 .text 代码段）
		-- 我们将一块连续的、具有相同权限的数据称为一个 Segment
		-- 一个 Segment 由多个权限相同的 Section 构成。
		-- “Segment”也被翻译为“段”，但这里的段（Segment）是针对加载和执行的过程。

	5. 在目标文件中，段表（Section Table）用来描述各个 Section 的信息，包括它的名字、长度、在文件中的偏移、读写权限等，通过段表可以详细地了解目标文件的结构。
	6. 在可执行文件中，段表被删除了，取代它的是程序头表（Program Header Table）；
		-- 程序头表用来描述各个 Segment 的信息，包括它的类型、偏移、在进程虚拟地址空间中的起始地址、物理装载地址、长度、权限等。
		-- 操作系统就是根据程序头表将可执行文件加载到内存，并为各个 Segment 分配内存空间、确定起止地址。
		-- 可执行文件不再关注具体的文件结构，而是关注程序的加载和执行过程。
		-- 由于可执行文件在加载时实际上是被映射的虚拟地址空间，所以可执行文件很多时候又被叫做映像文件（Image）。

J. 在C语言中，模块之间的依赖关系主要有两种：一种是模块间的函数调用，另外一种是模块间的变量访问。
		-- 如何处理这些依赖关系

K. 强弱符号的理解
	1. 在C语言中，编译器默认函数和初始化了的全局变量为强符号（Strong Symbol），未初始化的全局变量为弱符号（Weak Symbol）。
	2. 强符号之所以强，是因为它们拥有确切的数据，变量有值，函数有函数体；
	3. 弱符号之所以弱，是因为它们还未被初始化，没有确切的数据。
	4. 链接器会按照如下的规则处理被多次定义的强符号和弱符号：
		-- 不允许强符号被多次定义，也即不同的目标文件中不能有同名的强符号；如果有多个强符号，那么链接器会报符号重复定义错误。
		-- 如果一个符号在某个目标文件中是强符号，在其他文件中是弱符号，那么选择强符号。
		-- 如果一个符号在所有的目标文件中都是弱符号，那么选择其中占用空间最大的一个。

		-- 比如: 目标文件 a.o 定义全局变量 global 为 int 类型，占用4个字节，目标文件 b.o 定义 global 为 double 类型，占用8个字节，
		那么被链接后，符号 global 占用8个字节。请尽量不要使用多个不同类型的弱符号，否则有时候很难发现程序错误。

	5. 弱符号对于库来说十分有用，我们在开发库时，可以将某些符号定义为弱符号，这样就能够被用户定义的强符号覆盖，从而使得程序可以使用自定义版本的函数，增加了很大的灵活性。【重要】

L. 强弱引用的理解
	1. 引用（Reference），是指对符号的使用。在下面的代码中：
		int a = 100, b = 200, c;
		c = a + b;
		第一行是符号定义，第二行是符号引用。

	2. 目前我们所看到的符号引用，在所有目标文件被链接成可执行文件时，它们的地址都要被找到，如果没有符号定义，链接器就会报符号未定义错误，这种被称为强引用（Strong Reference）。
	3. 弱引用（Weak Reference），如果符号没有定义，也不报错。链接器不认为它是一个错误，一般默认其为 0（地址为 0: 访问这个地址会导致端错误），或者是一个特殊的值，以便程序代码能够识别。
		__attribute__((weak)) extern int a;
		__attribute__((weak)) extern void func();  //也可以不写extern

	4. 弱引用和强引用非常利于程序的模块化开发，我们可以将程序的扩展模块定义为弱引用，当我们将扩展模块和程序链接在一起时，程序就可以正常使用；
		如果我们去掉了某些模块，那么程序也可以正常链接，只是缺少了某些功能，这使得程序的功能更加容易裁剪和组合。

M. 头文件与源文件的职责
	1. .c 文件主要负责实现，也就是定义函数和变量；
	2. .h 文件主要负责声明（包括变量声明和函数声明）、宏定义、类型定义等。
	3. 头文件可以包含如下的内容：
		可以声明函数，但不可以定义函数。
		可以声明变量，但不可以定义变量。
		可以定义宏，包括带参的宏和不带参的宏。
		结构体的定义、自定义数据类型一般也放在头文件中。

	4. 可以保护版权，我们在发布相关模块之前，可以将它们都编译成目标文件，或者打包成静态库，只要向用户提供头文件，用户就可以将这些模块链接到自己的程序中。

N. 标准头文件 
	1. 合格程序员：<stdio.h>、<ctype.h>、<stdlib.h>、<string.h>
	2. 熟练程序员：<assert.h>、<limits.h>、<stddef.h>、<time.h>
	3. 优秀程序员：<float.h>、<math.h>、<error.h>、<locale.h>、<setjmp.h>、<signal.h>、<stdarg.h>

















































