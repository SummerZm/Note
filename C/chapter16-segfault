A.获取程序的调用栈
	1. backtrace的实现依赖于栈指针（fp寄存器），在gcc编译过程中任何非零的优化等级（-On参数）或加入了栈指针优化参数-fomit-frame-pointer后多将不能正确得到程序栈信息；
	2. backtrace_symbols的实现需要符号名称的支持，在gcc编译过程中需要加入-rdynamic参数；
	3. 内联函数没有栈帧，它在编译过程中被展开在调用的位置；
	4. 尾调用优化（Tail-call Optimization）将复用当前函数栈，而不再生成新的函数栈，这将导致栈信息不能正确被获取。

B. 捕获系统异常信号， 输出调用栈
	1. 当程序出现异常时通常伴随着会收到一个由内核发过来的异常信号，如当对内存出现非法访问时将收到段错误信号SIGSEGV，然后才退出。
	2. 利用这一点，当我们在收到异常信号后将程序的调用栈进行输出，它通常是利用signal()函数，关于系统信号的

C. 从backtrace信息分析定位问题
	1. 静态链接情况下的错误信息分析定位
		gcc -g -rdynamic backtrace.c add.c dump.c -o backtrace


	2. 动态链接情况下的错误信息分析定位
		-- 法1： 找出动态库的加载地址，减去backtrace的地址得到偏移地址，然后执行addr2line.
		-- 法2： 找到符号的地址加上偏移，然后执行addr2line. ex: (add1+0x1a)

D. 常见问题 [相关make]
	a. 如何编译支持backtrace的程序？
		gcc -g -rdynamic backtrace.c add.c dump.c -o backtrace
	
	b. 如何编译支持backtrace的动态库？
		gcc -g -rdynamic add.c -fPIC -shared -o libadd.so

	c. 如何编译能正确加载动态的程序?
		gcc -g -rdynamic backtrace.c dump.c -L. -ladd -Wl,-rpath=. -o backtrace
		参数-Wl,-rpath=.为指定程序执行时动态链接库搜索路径为当前目录，否则会出现执行找不到libadd.so的错误

	d. 如何得到动态库的符号地址，生成符号map文件?
		gcc -g -rdynamic add.c -fPIC -shared -o libadd.so -Wl,-Map,add.map

	e. 如何根据偏移定位动态库中的代码？
		addr2line -e libadd.so 0x7f85839fa5c6

	f. 如何定位应用程序符号动态库的地址？ 
		符号: nm program
		动态库: ldd program
	
	g. 如何开启core文件?
		查看core文件大小限制: ulimit -c  输出0则默认不开启
		开启并设置core文件的大小为1M: ulimit -c 1024

	h. 如何生成反汇编文件？
		objdump -d ./segfault3 > segfault3Dump
		segfault at 80484e0 ip 0018506a sp bfc1cd6c error 7 in libc-2.10.1.so[110000+13e000]
		其中: 80484e0是汇编地址。

E. 段错误类型:
	a. 访问只读地址	 (常量区)
	b. 访问不存在地址 (NULL)
	c. 访问受保护地址 (int*(0)) 
	d. 栈溢出

F. 相关代码:
	a. source: add.c 
		#include <stdio.h>  
		#include <stdlib.h>  
		#include <unistd.h>  
		  
		int add1(int num)  
		{  
			int ret = 0x00;  
			int *pTemp = NULL;  
			  
			*pTemp = 0x01;  /* 这将导致一个段错误，致使程序崩溃退出 */  
			  
			ret = num + *pTemp;  
			  
			return ret;  
		}  
		  
		int add(int num)  
		{  
			int ret = 0x00;  
		  
			ret = add1(num);  
			  
			return ret;  
		}  

	b, source: dump.c 
		#include <stdio.h>  
		#include <stdlib.h>  
		#include <unistd.h>  
		#include <signal.h>       /* for signal */  
		#include <execinfo.h>     /* for backtrace() */  
		  
		#define BACKTRACE_SIZE   16  
		  
		void dump(void)  
		{  
			int j, nptrs;  
			void *buffer[BACKTRACE_SIZE];  
			char **strings;  
			  
			nptrs = backtrace(buffer, BACKTRACE_SIZE);  
			  
			printf("backtrace() returned %d addresses\n", nptrs);  
		  
			strings = backtrace_symbols(buffer, nptrs);  
			if (strings == NULL) {  
				perror("backtrace_symbols");  
				exit(EXIT_FAILURE);  
			}  
		  
			for (j = 0; j < nptrs; j++)  
				printf("  [%02d] %s\n", j, strings[j]);  
		  
			free(strings);  
		}  
		  
		void signal_handler(int signo)  
		{  
			  
		#if 0     
			char buff[64] = {0x00};  
				  
			sprintf(buff,"cat /proc/%d/maps", getpid());  
				  
			system((const char*) buff);  
		#endif    
		  
			printf("\n=========>>>catch signal %d <<<=========\n", signo);  
			  
			printf("Dump stack start...\n");  
			dump();  
			printf("Dump stack end...\n");  
		  
			signal(signo, SIG_DFL); /* 恢复信号默认处理 */  
			raise(signo);           /* 重新发送信号 */  
		}  

	c. source: backtrace.c 
		#include <stdio.h>  
		#include <stdlib.h>  
		#include <unistd.h>  
		#include <signal.h>       /* for signal */  
		#include <execinfo.h>     /* for backtrace() */  
		  
		extern void dump(void);  
		extern void signal_handler(int signo);  
		extern int add(int num);  
		  
		int main(int argc, char *argv[])  
		{  
			int sum = 0x00;  
			  
			signal(SIGSEGV, signal_handler);  /* 为SIGSEGV信号安装新的处理函数 */  
			  
			sum = add(sum);  
			  
			printf(" sum = %d \n", sum);  
			  
			return 0x00;  
		}  


















